from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from aiogram import Bot
from bot.database import get_user, insert_user, update_user, save_feedback
from bot.keyboard import create_dynamic_menu
from bot.inline_handlers import router as inline_router
from bot.psychologist import get_psychologist_response

class UserState(StatesGroup):
    waiting_for_name = State()
    waiting_for_feedback = State() 

router = Router()
scheduler = AsyncIOScheduler()

async def send_notification(user_id: int, bot: Bot):
    await bot.send_message(user_id, "ü•∏ –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π!")

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if user:
        username, chat_enabled = user
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username}!",
            reply_markup=create_dynamic_menu(chat_enabled)
        )
    else:
        await insert_user(user_id, {"name": None, "chat_enabled": False})
        await message.answer("ü§ì –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
        await state.set_state(UserState.waiting_for_name)

    bot = message.bot
    scheduler.add_job(
        send_notification, 
        trigger=IntervalTrigger(hours=25),
        args=[user_id, bot],
        max_instances=1
    )
    scheduler.start()

@router.message(Command("about"))
async def info_handler(message: Message):
    instruction_text = (
        "üìö *–ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?*\n\n"
        "1Ô∏è‚É£ /start ‚Äî üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n"
        "2Ô∏è‚É£ /about ‚Äî ‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "3Ô∏è‚É£ /feedback ‚Äî ‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n"
        "4Ô∏è‚É£ '–í–∫–ª—é—á–∏—Ç—å —á–∞—Ç' ‚Äî üí¨ –ó–∞–ø—É—Å–∫ –æ–±—â–µ–Ω–∏—è.\n"
        "5Ô∏è‚É£ '–í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç' ‚Äî üîï –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è.\n"
        "6Ô∏è‚É£ '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è' ‚Äî ‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –∏–º—è –≤ –±–æ—Ç–µ.\n"
        "7Ô∏è‚É£ '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏' ‚Äî üß© –£–∑–Ω–∞—Ç—å —Ü–∏—Ç–∞—Ç—É –∏ —Å–æ–≤–µ—Ç –¥–Ω—è.\n"
    )
    await message.answer(instruction_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /feedback
@router.message(Command("feedback"))
async def feedback_handler(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_feedback)
    await message.reply("üßê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
@router.message(UserState.waiting_for_feedback)
async def save_feedback_handler(message: Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_feedback(user_id, feedback_text)
    await message.reply("ü´∂ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(F.text == "–í–∫–ª—é—á–∏—Ç—å —á–∞—Ç")
async def chat_start_handler(message: Message):
    user_id = message.from_user.id
    await update_user(user_id, {"chat_enabled": True})
    await message.answer("‚úÖ –ß–∞—Ç –≤–∫–ª—é—á–µ–Ω! –ü–∏—à–∏—Ç–µ, —è –≤–∞—Å —Å–ª—ã—à—É!", reply_markup=create_dynamic_menu(True))

@router.message(F.text == "–í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç")
async def chat_end_handler(message: Message):
    user_id = message.from_user.id
    await update_user(user_id, {"chat_enabled": False})
    await message.answer("‚ùå –ß–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω! –ú—ã –±–æ–ª—å—à–µ –Ω–µ –æ–±—â–∞–µ–º—Å—è.", reply_markup=create_dynamic_menu(False))

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_username_prompt(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_name)
    await message.reply("üôà –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")

@router.message(UserState.waiting_for_name)
async def change_username(message: Message, state: FSMContext):
    new_username = message.text
    user_id = message.from_user.id

    await update_user(user_id, {"name": new_username})
    await message.reply(f"üëå –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_username}!")
    await state.clear()

@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏")
async def show_options_handler(message: Message):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –î–Ω—è", callback_data="option_1")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –î–Ω—è", callback_data="option_2")]
    ])
    await message.answer("ü´° –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=inline_keyboard)

@router.message()
async def psychologist_conversation_handler(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)

    if user and user[1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —á–∞—Ç
        user_message = message.text
        model_response = get_psychologist_response(user_message)
        await message.answer(model_response)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ —Å–µ–π—á–∞—Å. –í–∫–ª—é—á–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.")

router.include_router(inline_router)
